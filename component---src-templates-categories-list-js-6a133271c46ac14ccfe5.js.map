{"version":3,"sources":["webpack:///./src/templates/categories-list.js"],"names":["CategoriesList","render","data","this","props","pageContext","currentPage","numPages","activeCategory","allCategories","posts","allMarkdownRemark","edges","filter","edge","node","frontmatter","categories","indexOf","isFirst","isLast","prevPage","toString","nextPage","title","keywords","className","map","banner","fields","slug","key","sizes","childImageSharp","style","marginBottom","rhythm","boxShadow","to","date","category","dangerouslySetInnerHTML","__html","excerpt","React","Component","pageQuery"],"mappings":"sSASMA,E,0LACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KADD,EAK0DC,KAAKC,MAAMC,YAApEC,EALD,EAKCA,YAAaC,EALd,EAKcA,SAAUC,EALxB,EAKwBA,eAAgBC,EALxC,EAKwCA,cAEzCC,EAAQR,EAAKS,kBAAkBC,MAAMC,QAAO,SAACC,GAAD,OAChDA,EAAKC,KAAKC,YAAYC,WAAWC,QAAQV,IAAkB,KAIvDW,EAA0B,IAAhBb,EACVc,EAASd,IAAgBC,EACzBc,EAAWf,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGgB,WAC3DC,GAAYjB,EAAc,GAAGgB,WAGnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEE,MAAOhB,EACPiB,SAAU,CAAC,OAAD,wCAEZ,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,WACb,4BAAKlB,KAGT,yBAAKkB,UAAU,gBACZhB,EAAMiB,KAAI,YAAe,IAAZZ,EAAW,EAAXA,KACNE,EAAaF,EAAKC,YAAYC,WAC9BW,EAASb,EAAKC,YAAYY,OAC1BJ,EAAQT,EAAKC,YAAYQ,OAAST,EAAKc,OAAOC,KACpD,OACE,yBAAKC,IAAKhB,EAAKc,OAAOC,KAAMJ,UAAU,gBACpC,yBAAKA,UAAU,aACZE,GACC,kBAAC,IAAD,CACEI,MAAOJ,EAAOK,gBAAgBD,SAIpC,wBACEE,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIvB,EAAKc,OAAOC,MACjDN,IAGL,+BAAQT,EAAKC,YAAYuB,MAExBtB,EAAWU,KAAI,SAAEa,GAChB,OACE,0BAAMT,IAAKS,GACR,MACD,+BACM,kBAAC,OAAD,CAAMF,GAAE,eAAiBE,GACpBA,QAMjB,uBAAGC,wBAAyB,CAAEC,OAAQ3B,EAAK4B,WAC3C,yBAAKjB,UAAU,YAKrB,kBAAC,IAAU,CAACpB,cAAYC,WAASc,WAASE,WAASJ,UAAQC,YAE7D,yBAAKM,UAAU,WACb,kBAAC,IAAD,CAAYT,WAAYR,Q,GA7EPmC,IAAMC,WAqFpB7C,YAER,IAAM8C,EAAS","file":"component---src-templates-categories-list-js-6a133271c46ac14ccfe5.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\nimport Img from 'gatsby-image';\r\nimport SEO from '../components/seo'\r\nimport Layout from '../components/Layout'\r\nimport { rhythm } from '../utils/typography'\r\nimport Categories from '../components/Categories/index'\r\nimport Pages from '../components/Pages/index'\r\n\r\nclass CategoriesList extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    // const siteTitle = data.site.siteMetadata.title\r\n    // const posts = data.allMdx.edges\r\n    // const { currentPage, numPages, categories, activeCategory } = this.props.pageContext\r\n    const { currentPage, numPages, activeCategory, allCategories } = this.props.pageContext\r\n\r\n    const posts = data.allMarkdownRemark.edges.filter((edge) =>\r\n      edge.node.frontmatter.categories.indexOf(activeCategory) >=0 \r\n    );\r\n    \r\n    \r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\r\n    const nextPage = (currentPage + 1).toString()\r\n\r\n\r\n    return (\r\n      <Layout >\r\n        <SEO\r\n          title={activeCategory}\r\n          keywords={[`blog`, `visualization`, `javascript`, `react`]}\r\n        />\r\n        <div className=\"categories-list\">\r\n          <div className=\"categories-container\">\r\n            <div className=\"columns\">\r\n              <h1>{activeCategory}</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"recent-posts\">\r\n            {posts.map(({ node }) => {\r\n              const categories = node.frontmatter.categories\r\n              const banner = node.frontmatter.banner\r\n              const title = node.frontmatter.title || node.fields.slug\r\n              return (\r\n                <div key={node.fields.slug} className=\"archive-post\">\r\n                  <div className=\"img-right\">\r\n                    {banner && (\r\n                      <Img\r\n                        sizes={banner.childImageSharp.sizes}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                  <h3\r\n                    style={{\r\n                      marginBottom: rhythm(1 / 4),\r\n                    }}\r\n                  >\r\n                    <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\r\n                      {title}\r\n                    </Link>\r\n                  </h3>\r\n                  <small>{node.frontmatter.date}</small>\r\n                  \r\n                  {categories.map(( category ) => {\r\n                    return (\r\n                      <span key={category}>\r\n                        {' | '}\r\n                        <small>\r\n                              <Link to={`/categories/${category}`}>\r\n                                  {category}\r\n                              </Link>\r\n                        </small>\r\n                      </span>\r\n                    )\r\n                  })}\r\n                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\r\n                  <div className=\"clr\"></div>\r\n                </div>\r\n              )\r\n            })}\r\n            {/* 页面底部分页模块 */}\r\n            <Pages {...{currentPage,numPages,prevPage,nextPage,isFirst,isLast}}/>\r\n          </div>\r\n          <div className=\"sidebar\">\r\n            <Categories categories={allCategories} />\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CategoriesList\r\n\r\nexport const pageQuery = graphql`\r\n  query categoriesPageQuery($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip) {\r\n      edges {\r\n        node {\r\n          excerpt(format: HTML)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MM月DD日, YYYY\")\r\n            title\r\n            categories\r\n            banner {\r\n              childImageSharp {\r\n                sizes(maxWidth: 600) {\r\n                  ...GatsbyImageSharpSizes\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}